//ignore typescript
// @ts-nocheck
import { Context } from "svgcanvas";
import { optimize } from 'svgo';

class SvgExporter {

    public static exportStageSVG(layer, height, width): string {

        // Create a new context for rendering the SVG
        const oldContext = layer.canvas.context._context;
        const c2s = layer.canvas.context._context = new Context({
            height: height,
            width: width,
            ctx: oldContext
        });

        // Draw the stage on the new context
        layer.draw();

        // Get the serialized SVG data
        let out = c2s.getSerializedSvg();

        const result = optimize(out, {
            multipass: true, // optional, does deeper optimization
            plugins: [
                // optional: configure plugins here
                'preset-default',
            ],
        });

        // If 'blob' is true, create a Blob object with the SVG data and specify the MIME type
        //out = new Blob([out], { type: "image/svg+xml;charset=utf-8" });

        // Restore the original context
        layer.canvas.context._context = oldContext;

        // Redraw the stage
        layer.draw();

        if ('data' in result) {
            const optimizedSvgText = result.data; // Step 2: Optimized SVG string
            const optimizedBlob = optimizedSvgText
            return optimizedBlob;
        } else {
            throw new Error('Failed to optimize SVG');
        }

        // Return the SVG data or Blob object
        //return out;
    }
}

export default SvgExporter;